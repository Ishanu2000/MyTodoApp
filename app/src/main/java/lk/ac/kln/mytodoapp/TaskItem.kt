package lk.ac.kln.mytodoapp

import android.content.Context
import androidx.core.content.ContextCompat
import java.time.LocalDate
import java.time.LocalTime
import java.util.*

/**
 * Represents a task item in the to-do list.
 *
 * @property name The name of the task.
 * @property desc The description of the task.
 * @property dueTime The time by which the task should be completed (nullable).
 * @property completedDate The date when the task was marked as completed (nullable).
 * @property id A unique identifier for the task, generated by default.
 */
class TaskItem(
    var name: String,
    var desc: String,
    var dueTime: LocalTime?,
    var completedDate: LocalDate?,
    var id: UUID = UUID.randomUUID()
) {

    /**
     * Checks whether the task is completed.
     *
     * @return `true` if the task has a completed date, otherwise `false`.
     */
    fun isCompleted() = completedDate != null

    /**
     * Returns the appropriate image resource based on the task's completion status.
     *
     * @return The resource ID of the checked or unchecked icon.
     */
    fun imageResource(): Int = if (isCompleted()) R.drawable.checked_24 else R.drawable.unchecked_24

    /**
     * Returns the appropriate image color based on the task's completion status.
     *
     * @param context The context used to access resources.
     * @return The color resource for completed (purple) or incomplete (black) tasks.
     */
    fun imageColor(context: Context): Int = if (isCompleted()) purple(context) else black(context)

    /**
     * Retrieves the purple color for completed tasks.
     *
     * @param context The context used to access resources.
     * @return The purple color resource.
     */
    private fun purple(context: Context) = ContextCompat.getColor(context, R.color.purple_500)

    /**
     * Retrieves the black color for incomplete tasks.
     *
     * @param context The context used to access resources.
     * @return The black color resource.
     */
    private fun black(context: Context) = ContextCompat.getColor(context, R.color.black)
}
